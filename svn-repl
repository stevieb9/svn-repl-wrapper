#!/usr/bin/perl

use warnings;
use strict;
use 5.12.0;
use threads;
use Fcntl qw( LOCK_EX LOCK_NB );
use File::NFSLock;
use Data::Dumper;

my $pri_dir = "/SVN";
my $dest    = "/SVN.dest"; # automate
my $slave_check_file = "$pri_dir/is_svn_slave";
my @sec_dir_locations = qw( repos external_repos );
my $command             = "/usr/bin/rsync -arcvv ";

# integrity checks

my $repl_lock = File::NFSLock->new( $0, LOCK_EX|LOCK_NB );

ensure_slave( $slave_check_file );
caller_has_sudo();
lock_process( $repl_lock );

my $dir_struct = create_dir_struct({ 
                                    pri_dir             =>  $pri_dir, 
                                    sec_dir_locations   => \@sec_dir_locations, 
                                });

my @master_exclude_paths = build_exclude_paths( { dir_struct => $dir_struct } );

create_threads({ 
                dir_struct      => $dir_struct, 
                pri_dir         => $pri_dir,
                master_exclude  => \@master_exclude_paths, 
                repl_command    => $command,
                repl_dest       => $dest,
            });

# functions

sub create_threads {

    my $params = shift;
    my $dir_struct      = $params->{ dir_struct };
    my $repl_command    = $params->{ repl_command };
    my $repl_dest       = $params->{ repl_dest };
    my $pri_dir         = $params->{ pri_dir };
    my $excludes        = $params->{ master_exclude };

    my @repl_jobs;
    my @sec_jobs;

    my $pri_job = "$repl_command ";
    for my $master_exclude ( @$excludes ){
        $pri_job .= " --exclude=$master_exclude ";
        push @sec_jobs, "$repl_command $pri_dir/$master_exclude $dest";
    }

    $pri_job .= " /SVN/* $dest";

    push @repl_jobs, ( $pri_job, @sec_jobs );

    my @thread_list;

    for my $job_to_thread ( @repl_jobs ) {
        my $thread = threads->create( \&exec, $job_to_thread );
        push @thread_list, $thread;
    }
    for my $t ( @thread_list ){
        my @list = threads->list();
        say $$_ for @list;

        $t->join();
    }
}
sub exec {
    
    my $job = shift;
    print "Starting thread $job\n";
    system( $job );
}
sub ensure_slave {

    my $slave_check_file = shift;

    die "$0 can only be run on a Slave SVN server!\n"
        if ! -e $slave_check_file;
}
sub lock_process {

    my $locked = shift;
    
    if ( ! $locked ){
        die "$0 is already running... aborting this run\n";
    }
}
sub caller_has_sudo {

    my $running_as_user = getpwuid( $< );

    die "$0 needs to be called with sudo...aborting\n"
        if $running_as_user ne 'root';
}
sub create_dir_struct {

    use File::Find::Rule;
    
    my $params              = shift;
    my $pri_dir             = $params->{ pri_dir };
    my $sec_dir_locations   = $params->{ sec_dir_locations };    
    
    my $dir_struct;

    for my $sec_dir ( @$sec_dir_locations ){
            
    @{ $dir_struct->{ $pri_dir }{ $sec_dir } } = File::Find::Rule
                                                            ->relative
                                                            ->directory
                                                            ->maxdepth( 1 )
                                                            ->in( "$pri_dir/$sec_dir" );
    }

    return $dir_struct;    
}
sub build_exclude_paths {

    my $params              = shift;
    my $dir_struct          = $params->{ dir_struct };

    for my $top_level ( keys %$dir_struct ){
        for my $sec_dir ( keys %{ $dir_struct->{ $top_level } } ){
            push @{ $dir_struct->{ exclude_paths } }, "$sec_dir";
        }
    }
    return @{ $dir_struct->{ exclude_paths } };
}
sub _nothing{} # vim placeholder

